
LED_Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd8  08002dd8  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd8  08002dd8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000044  08002e24  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002e24  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e3a  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6d  00000000  00000000  00029ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b5a  00000000  00000000  0002cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4d4  00000000  00000000  00043902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824ac  00000000  00000000  0004edd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c0  00000000  00000000  000d12d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da0 	.word	0x08002da0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002da0 	.word	0x08002da0

0800014c <clearAll>:
 *      Author: DELL
 */

#include "main.h"

void clearAll(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,LR1_Pin|LR2_Pin|LY1_Pin|LY2_Pin|LG1_Pin|LG2_Pin,GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	217e      	movs	r1, #126	; 0x7e
 8000154:	4808      	ldr	r0, [pc, #32]	; (8000178 <clearAll+0x2c>)
 8000156:	f001 fe12 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin,GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000160:	4806      	ldr	r0, [pc, #24]	; (800017c <clearAll+0x30>)
 8000162:	f001 fe0c 	bl	8001d7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin|SEG_12_Pin|SEG_13_Pin,GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <clearAll+0x2c>)
 800016e:	f001 fe06 	bl	8001d7e <HAL_GPIO_WritePin>

}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800
 800017c:	40010c00 	.word	0x40010c00

08000180 <display7SEG>:

void display7SEG(int num){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b09      	cmp	r3, #9
 800018c:	f200 808e 	bhi.w	80002ac <display7SEG+0x12c>
 8000190:	a201      	add	r2, pc, #4	; (adr r2, 8000198 <display7SEG+0x18>)
 8000192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000196:	bf00      	nop
 8000198:	080001c1 	.word	0x080001c1
 800019c:	080001db 	.word	0x080001db
 80001a0:	080001f3 	.word	0x080001f3
 80001a4:	0800020d 	.word	0x0800020d
 80001a8:	08000227 	.word	0x08000227
 80001ac:	0800023f 	.word	0x0800023f
 80001b0:	08000257 	.word	0x08000257
 80001b4:	0800026f 	.word	0x0800026f
 80001b8:	08000287 	.word	0x08000287
 80001bc:	08000295 	.word	0x08000295
	switch (num){
		case 0:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin,GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80001c6:	4841      	ldr	r0, [pc, #260]	; (80002cc <display7SEG+0x14c>)
 80001c8:	f001 fdd9 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_6_Pin ,GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d2:	483e      	ldr	r0, [pc, #248]	; (80002cc <display7SEG+0x14c>)
 80001d4:	f001 fdd3 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80001d8:	e074      	b.n	80002c4 <display7SEG+0x144>
		case 1:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin,GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 80001e0:	483a      	ldr	r0, [pc, #232]	; (80002cc <display7SEG+0x14c>)
 80001e2:	f001 fdcc 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_2_Pin ,GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2130      	movs	r1, #48	; 0x30
 80001ea:	4838      	ldr	r0, [pc, #224]	; (80002cc <display7SEG+0x14c>)
 80001ec:	f001 fdc7 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80001f0:	e068      	b.n	80002c4 <display7SEG+0x144>
		case 2:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_3_Pin|SEG_4_Pin|SEG_6_Pin,GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80001f8:	4834      	ldr	r0, [pc, #208]	; (80002cc <display7SEG+0x14c>)
 80001fa:	f001 fdc0 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_2_Pin|SEG_5_Pin ,GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000204:	4831      	ldr	r0, [pc, #196]	; (80002cc <display7SEG+0x14c>)
 8000206:	f001 fdba 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 800020a:	e05b      	b.n	80002c4 <display7SEG+0x144>
		case 3:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_6_Pin,GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 711e 	mov.w	r1, #632	; 0x278
 8000212:	482e      	ldr	r0, [pc, #184]	; (80002cc <display7SEG+0x14c>)
 8000214:	f001 fdb3 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_4_Pin|SEG_5_Pin ,GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800021e:	482b      	ldr	r0, [pc, #172]	; (80002cc <display7SEG+0x14c>)
 8000220:	f001 fdad 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000224:	e04e      	b.n	80002c4 <display7SEG+0x144>
		case 4:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_3_Pin|SEG_4_Pin ,GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	21c8      	movs	r1, #200	; 0xc8
 800022a:	4828      	ldr	r0, [pc, #160]	; (80002cc <display7SEG+0x14c>)
 800022c:	f001 fda7 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_2_Pin|SEG_5_Pin|SEG_6_Pin ,GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 714c 	mov.w	r1, #816	; 0x330
 8000236:	4825      	ldr	r0, [pc, #148]	; (80002cc <display7SEG+0x14c>)
 8000238:	f001 fda1 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 800023c:	e042      	b.n	80002c4 <display7SEG+0x144>
		case 5:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_2_Pin|SEG_3_Pin|SEG_5_Pin|SEG_6_Pin ,GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000244:	4821      	ldr	r0, [pc, #132]	; (80002cc <display7SEG+0x14c>)
 8000246:	f001 fd9a 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin|SEG_4_Pin ,GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	2190      	movs	r1, #144	; 0x90
 800024e:	481f      	ldr	r0, [pc, #124]	; (80002cc <display7SEG+0x14c>)
 8000250:	f001 fd95 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000254:	e036      	b.n	80002c4 <display7SEG+0x144>
		case 6:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin ,GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800025c:	481b      	ldr	r0, [pc, #108]	; (80002cc <display7SEG+0x14c>)
 800025e:	f001 fd8e 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin ,GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2110      	movs	r1, #16
 8000266:	4819      	ldr	r0, [pc, #100]	; (80002cc <display7SEG+0x14c>)
 8000268:	f001 fd89 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 800026c:	e02a      	b.n	80002c4 <display7SEG+0x144>
		case 7:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin ,GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2138      	movs	r1, #56	; 0x38
 8000272:	4816      	ldr	r0, [pc, #88]	; (80002cc <display7SEG+0x14c>)
 8000274:	f001 fd83 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin ,GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800027e:	4813      	ldr	r0, [pc, #76]	; (80002cc <display7SEG+0x14c>)
 8000280:	f001 fd7d 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000284:	e01e      	b.n	80002c4 <display7SEG+0x144>
		case 8:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin ,GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800028c:	480f      	ldr	r0, [pc, #60]	; (80002cc <display7SEG+0x14c>)
 800028e:	f001 fd76 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000292:	e017      	b.n	80002c4 <display7SEG+0x144>
		case 9:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_5_Pin|SEG_6_Pin,GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 715e 	mov.w	r1, #888	; 0x378
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <display7SEG+0x14c>)
 800029c:	f001 fd6f 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_4_Pin ,GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <display7SEG+0x14c>)
 80002a6:	f001 fd6a 	bl	8001d7e <HAL_GPIO_WritePin>
				break;
 80002aa:	e00b      	b.n	80002c4 <display7SEG+0x144>
		default:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_5_Pin|SEG_6_Pin,GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 715e 	mov.w	r1, #888	; 0x378
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <display7SEG+0x14c>)
 80002b4:	f001 fd63 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_4_Pin ,GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <display7SEG+0x14c>)
 80002be:	f001 fd5e 	bl	8001d7e <HAL_GPIO_WritePin>
		}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <display7SEG1>:

void display7SEG1(int num){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b09      	cmp	r3, #9
 80002dc:	f200 8094 	bhi.w	8000408 <display7SEG1+0x138>
 80002e0:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <display7SEG1+0x18>)
 80002e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e6:	bf00      	nop
 80002e8:	08000311 	.word	0x08000311
 80002ec:	0800032b 	.word	0x0800032b
 80002f0:	08000345 	.word	0x08000345
 80002f4:	0800035f 	.word	0x0800035f
 80002f8:	08000379 	.word	0x08000379
 80002fc:	08000393 	.word	0x08000393
 8000300:	080003ad 	.word	0x080003ad
 8000304:	080003c7 	.word	0x080003c7
 8000308:	080003e1 	.word	0x080003e1
 800030c:	080003ef 	.word	0x080003ef
	switch (num){
		case 0:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin|SEG_12_Pin,GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000316:	4845      	ldr	r0, [pc, #276]	; (800042c <display7SEG1+0x15c>)
 8000318:	f001 fd31 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_13_Pin ,GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000322:	4842      	ldr	r0, [pc, #264]	; (800042c <display7SEG1+0x15c>)
 8000324:	f001 fd2b 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000328:	e07b      	b.n	8000422 <display7SEG1+0x152>
		case 1:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_10_Pin|SEG_11_Pin|SEG_12_Pin|SEG_13_Pin,GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 8000330:	483e      	ldr	r0, [pc, #248]	; (800042c <display7SEG1+0x15c>)
 8000332:	f001 fd24 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_8_Pin|SEG_9_Pin ,GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800033c:	483b      	ldr	r0, [pc, #236]	; (800042c <display7SEG1+0x15c>)
 800033e:	f001 fd1e 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000342:	e06e      	b.n	8000422 <display7SEG1+0x152>
		case 2:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_10_Pin|SEG_11_Pin|SEG_13_Pin,GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 800034a:	4838      	ldr	r0, [pc, #224]	; (800042c <display7SEG1+0x15c>)
 800034c:	f001 fd17 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_9_Pin|SEG_12_Pin ,GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000356:	4835      	ldr	r0, [pc, #212]	; (800042c <display7SEG1+0x15c>)
 8000358:	f001 fd11 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 800035c:	e061      	b.n	8000422 <display7SEG1+0x152>
		case 3:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_13_Pin,GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 8000364:	4831      	ldr	r0, [pc, #196]	; (800042c <display7SEG1+0x15c>)
 8000366:	f001 fd0a 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_11_Pin|SEG_12_Pin ,GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000370:	482e      	ldr	r0, [pc, #184]	; (800042c <display7SEG1+0x15c>)
 8000372:	f001 fd04 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000376:	e054      	b.n	8000422 <display7SEG1+0x152>
		case 4:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_10_Pin|SEG_11_Pin ,GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800037e:	482b      	ldr	r0, [pc, #172]	; (800042c <display7SEG1+0x15c>)
 8000380:	f001 fcfd 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_8_Pin|SEG_9_Pin|SEG_12_Pin|SEG_13_Pin ,GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 800038a:	4828      	ldr	r0, [pc, #160]	; (800042c <display7SEG1+0x15c>)
 800038c:	f001 fcf7 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000390:	e047      	b.n	8000422 <display7SEG1+0x152>
		case 5:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_9_Pin|SEG_10_Pin|SEG_12_Pin|SEG_13_Pin ,GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 8000398:	4824      	ldr	r0, [pc, #144]	; (800042c <display7SEG1+0x15c>)
 800039a:	f001 fcf0 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_8_Pin|SEG_11_Pin ,GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80003a4:	4821      	ldr	r0, [pc, #132]	; (800042c <display7SEG1+0x15c>)
 80003a6:	f001 fcea 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80003aa:	e03a      	b.n	8000422 <display7SEG1+0x152>
		case 6:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin|SEG_12_Pin|SEG_13_Pin ,GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80003b2:	481e      	ldr	r0, [pc, #120]	; (800042c <display7SEG1+0x15c>)
 80003b4:	f001 fce3 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_8_Pin ,GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003be:	481b      	ldr	r0, [pc, #108]	; (800042c <display7SEG1+0x15c>)
 80003c0:	f001 fcdd 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80003c4:	e02d      	b.n	8000422 <display7SEG1+0x152>
		case 7:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin ,GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <display7SEG1+0x15c>)
 80003ce:	f001 fcd6 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_10_Pin|SEG_11_Pin|SEG_12_Pin|SEG_13_Pin ,GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80003d8:	4814      	ldr	r0, [pc, #80]	; (800042c <display7SEG1+0x15c>)
 80003da:	f001 fcd0 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80003de:	e020      	b.n	8000422 <display7SEG1+0x152>
		case 8:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin|SEG_12_Pin|SEG_13_Pin ,GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <display7SEG1+0x15c>)
 80003e8:	f001 fcc9 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 80003ec:	e019      	b.n	8000422 <display7SEG1+0x152>
		case 9:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_12_Pin|SEG_13_Pin,GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <display7SEG1+0x15c>)
 80003f6:	f001 fcc2 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_11_Pin ,GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <display7SEG1+0x15c>)
 8000402:	f001 fcbc 	bl	8001d7e <HAL_GPIO_WritePin>
			break;
 8000406:	e00c      	b.n	8000422 <display7SEG1+0x152>
		default:
			HAL_GPIO_WritePin(GPIOA, SEG_7_Pin|SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_12_Pin|SEG_13_Pin,GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 800040e:	4807      	ldr	r0, [pc, #28]	; (800042c <display7SEG1+0x15c>)
 8000410:	f001 fcb5 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG_11_Pin ,GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <display7SEG1+0x15c>)
 800041c:	f001 fcaf 	bl	8001d7e <HAL_GPIO_WritePin>
		}
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800

08000430 <updateTrafficBuffer>:

int led_buffer_traffic1[2] = {1,2};
int led_buffer_traffic2[2] = {1,2};

void updateTrafficBuffer(int number, int number1){
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
	if(number<10){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b09      	cmp	r3, #9
 800043e:	dc06      	bgt.n	800044e <updateTrafficBuffer+0x1e>
		led_buffer_traffic1[0] = 0;
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <updateTrafficBuffer+0x88>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
		led_buffer_traffic1[1] = number;
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <updateTrafficBuffer+0x88>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6053      	str	r3, [r2, #4]
 800044c:	e012      	b.n	8000474 <updateTrafficBuffer+0x44>
	}
	else{
		led_buffer_traffic1[0] = (int)number/10;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <updateTrafficBuffer+0x8c>)
 8000452:	fb82 1203 	smull	r1, r2, r2, r3
 8000456:	1092      	asrs	r2, r2, #2
 8000458:	17db      	asrs	r3, r3, #31
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <updateTrafficBuffer+0x88>)
 800045e:	6013      	str	r3, [r2, #0]
		led_buffer_traffic1[1] = number - led_buffer_traffic1[0]*10;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <updateTrafficBuffer+0x88>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f06f 0209 	mvn.w	r2, #9
 8000468:	fb02 f203 	mul.w	r2, r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <updateTrafficBuffer+0x88>)
 8000472:	6053      	str	r3, [r2, #4]
	}

	if(number1<10){
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	2b09      	cmp	r3, #9
 8000478:	dc06      	bgt.n	8000488 <updateTrafficBuffer+0x58>
		led_buffer_traffic2[0] = 0;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <updateTrafficBuffer+0x90>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
		led_buffer_traffic2[1] = number1;
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <updateTrafficBuffer+0x90>)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	6053      	str	r3, [r2, #4]
	}
	else{
		led_buffer_traffic2[0] = (int)number1/10;
		led_buffer_traffic2[1] = number1 - led_buffer_traffic2[0]*10;
	}
}
 8000486:	e012      	b.n	80004ae <updateTrafficBuffer+0x7e>
		led_buffer_traffic2[0] = (int)number1/10;
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <updateTrafficBuffer+0x8c>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	1092      	asrs	r2, r2, #2
 8000492:	17db      	asrs	r3, r3, #31
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <updateTrafficBuffer+0x90>)
 8000498:	6013      	str	r3, [r2, #0]
		led_buffer_traffic2[1] = number1 - led_buffer_traffic2[0]*10;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <updateTrafficBuffer+0x90>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f06f 0209 	mvn.w	r2, #9
 80004a2:	fb02 f203 	mul.w	r2, r2, r3
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <updateTrafficBuffer+0x90>)
 80004ac:	6053      	str	r3, [r2, #4]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000000 	.word	0x20000000
 80004bc:	66666667 	.word	0x66666667
 80004c0:	20000008 	.word	0x20000008

080004c4 <update7SEG1>:

const int MAX_LED = 2;
int index_led1 = 0;
int index_led2 = 0;
void update7SEG1(int index1){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	switch(index1){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <update7SEG1+0x16>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d014      	beq.n	8000502 <update7SEG1+0x3e>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, GPIO_PIN_RESET);
		display7SEG(led_buffer_traffic1[index1]);
		break;
	}
}
 80004d8:	e027      	b.n	800052a <update7SEG1+0x66>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e0:	4814      	ldr	r0, [pc, #80]	; (8000534 <update7SEG1+0x70>)
 80004e2:	f001 fc4c 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ec:	4811      	ldr	r0, [pc, #68]	; (8000534 <update7SEG1+0x70>)
 80004ee:	f001 fc46 	bl	8001d7e <HAL_GPIO_WritePin>
		display7SEG(led_buffer_traffic1[index1]);
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <update7SEG1+0x74>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe40 	bl	8000180 <display7SEG>
		break;
 8000500:	e013      	b.n	800052a <update7SEG1+0x66>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <update7SEG1+0x70>)
 800050a:	f001 fc38 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <update7SEG1+0x70>)
 8000516:	f001 fc32 	bl	8001d7e <HAL_GPIO_WritePin>
		display7SEG(led_buffer_traffic1[index1]);
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <update7SEG1+0x74>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe2c 	bl	8000180 <display7SEG>
		break;
 8000528:	bf00      	nop
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010c00 	.word	0x40010c00
 8000538:	20000000 	.word	0x20000000

0800053c <update7SEG2>:

void update7SEG2(int index2){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	switch(index2){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <update7SEG2+0x16>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d014      	beq.n	800057a <update7SEG2+0x3e>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, EN4_Pin, GPIO_PIN_RESET);
		display7SEG1(led_buffer_traffic2[index2]);
		break;
	}
}
 8000550:	e027      	b.n	80005a2 <update7SEG2+0x66>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <update7SEG2+0x70>)
 800055a:	f001 fc10 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN4_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <update7SEG2+0x70>)
 8000566:	f001 fc0a 	bl	8001d7e <HAL_GPIO_WritePin>
		display7SEG1(led_buffer_traffic2[index2]);
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <update7SEG2+0x74>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff feac 	bl	80002d0 <display7SEG1>
		break;
 8000578:	e013      	b.n	80005a2 <update7SEG2+0x66>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <update7SEG2+0x70>)
 8000582:	f001 fbfc 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN4_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <update7SEG2+0x70>)
 800058e:	f001 fbf6 	bl	8001d7e <HAL_GPIO_WritePin>
		display7SEG1(led_buffer_traffic2[index2]);
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <update7SEG2+0x74>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe98 	bl	80002d0 <display7SEG1>
		break;
 80005a0:	bf00      	nop
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	20000008 	.word	0x20000008

080005b4 <display_Traffic_mode1>:

void display_Traffic_mode1(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	switch(status_Traffic){
 80005b8:	4b76      	ldr	r3, [pc, #472]	; (8000794 <display_Traffic_mode1+0x1e0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	f200 81de 	bhi.w	800097e <display_Traffic_mode1+0x3ca>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <display_Traffic_mode1+0x14>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	080006b7 	.word	0x080006b7
 80005d0:	080007b9 	.word	0x080007b9
 80005d4:	08000895 	.word	0x08000895
	case statusRed1:
		HAL_GPIO_WritePin(GPIOA,LR1_Pin,GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	486e      	ldr	r0, [pc, #440]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80005de:	f001 fbce 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY1_Pin,GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2104      	movs	r1, #4
 80005e6:	486c      	ldr	r0, [pc, #432]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80005e8:	f001 fbc9 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG1_Pin,GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2108      	movs	r1, #8
 80005f0:	4869      	ldr	r0, [pc, #420]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80005f2:	f001 fbc4 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LR2_Pin,GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2110      	movs	r1, #16
 80005fa:	4867      	ldr	r0, [pc, #412]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80005fc:	f001 fbbf 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY2_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2120      	movs	r1, #32
 8000604:	4864      	ldr	r0, [pc, #400]	; (8000798 <display_Traffic_mode1+0x1e4>)
 8000606:	f001 fbba 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG2_Pin,GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4862      	ldr	r0, [pc, #392]	; (8000798 <display_Traffic_mode1+0x1e4>)
 8000610:	f001 fbb5 	bl	8001d7e <HAL_GPIO_WritePin>
		updateTrafficBuffer(time_Red_update, time_Green_update);
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <display_Traffic_mode1+0x1e8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a61      	ldr	r2, [pc, #388]	; (80007a0 <display_Traffic_mode1+0x1ec>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff06 	bl	8000430 <updateTrafficBuffer>
		if(timer1_flag == 1){
 8000624:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <display_Traffic_mode1+0x1f0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d138      	bne.n	800069e <display_Traffic_mode1+0xea>
			update7SEG1(index_led1++);
 800062c:	4b5e      	ldr	r3, [pc, #376]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	495d      	ldr	r1, [pc, #372]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff44 	bl	80004c4 <update7SEG1>
			update7SEG2(index_led2++);
 800063c:	4b5b      	ldr	r3, [pc, #364]	; (80007ac <display_Traffic_mode1+0x1f8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	495a      	ldr	r1, [pc, #360]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000644:	600a      	str	r2, [r1, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff78 	bl	800053c <update7SEG2>
			++counter;
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a57      	ldr	r2, [pc, #348]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000654:	6013      	str	r3, [r2, #0]
			if(counter==2){
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d10c      	bne.n	8000678 <display_Traffic_mode1+0xc4>
				time_Red_update--;
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <display_Traffic_mode1+0x1e8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3b01      	subs	r3, #1
 8000664:	4a4d      	ldr	r2, [pc, #308]	; (800079c <display_Traffic_mode1+0x1e8>)
 8000666:	6013      	str	r3, [r2, #0]
				time_Green_update--;
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <display_Traffic_mode1+0x1ec>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <display_Traffic_mode1+0x1ec>)
 8000670:	6013      	str	r3, [r2, #0]
				counter=0;
 8000672:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			}
			if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000678:	4b4b      	ldr	r3, [pc, #300]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2202      	movs	r2, #2
 800067e:	4293      	cmp	r3, r2
 8000680:	da04      	bge.n	800068c <display_Traffic_mode1+0xd8>
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2202      	movs	r2, #2
 8000688:	4293      	cmp	r3, r2
 800068a:	db05      	blt.n	8000698 <display_Traffic_mode1+0xe4>
				index_led1=0;
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
				index_led2=0;
 8000692:	4b46      	ldr	r3, [pc, #280]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
			}
			setTimer1(250);
 8000698:	20fa      	movs	r0, #250	; 0xfa
 800069a:	f000 ffa9 	bl	80015f0 <setTimer1>
		}
		if(time_Green_update <= 0) {
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <display_Traffic_mode1+0x1ec>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f300 8164 	bgt.w	8000970 <display_Traffic_mode1+0x3bc>
			status_Traffic = statusYellow1;
 80006a8:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <display_Traffic_mode1+0x1e0>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
			counter=0;
 80006ae:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
		}
		break;
 80006b4:	e15c      	b.n	8000970 <display_Traffic_mode1+0x3bc>
	case statusYellow1:
		HAL_GPIO_WritePin(GPIOA,LR1_Pin,GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2102      	movs	r1, #2
 80006ba:	4837      	ldr	r0, [pc, #220]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006bc:	f001 fb5f 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY1_Pin,GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4834      	ldr	r0, [pc, #208]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006c6:	f001 fb5a 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG1_Pin,GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2108      	movs	r1, #8
 80006ce:	4832      	ldr	r0, [pc, #200]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006d0:	f001 fb55 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LR2_Pin,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2110      	movs	r1, #16
 80006d8:	482f      	ldr	r0, [pc, #188]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006da:	f001 fb50 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY2_Pin,GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	482d      	ldr	r0, [pc, #180]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006e4:	f001 fb4b 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG2_Pin,GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	482a      	ldr	r0, [pc, #168]	; (8000798 <display_Traffic_mode1+0x1e4>)
 80006ee:	f001 fb46 	bl	8001d7e <HAL_GPIO_WritePin>
		updateTrafficBuffer(time_Red_update, time_Yellow_update);
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <display_Traffic_mode1+0x1e8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <display_Traffic_mode1+0x200>)
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fe97 	bl	8000430 <updateTrafficBuffer>
		if(timer1_flag == 1){
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <display_Traffic_mode1+0x1f0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d138      	bne.n	800077c <display_Traffic_mode1+0x1c8>
			update7SEG1(index_led1++);
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4925      	ldr	r1, [pc, #148]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 8000712:	600a      	str	r2, [r1, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fed5 	bl	80004c4 <update7SEG1>
			update7SEG2(index_led2++);
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <display_Traffic_mode1+0x1f8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	4922      	ldr	r1, [pc, #136]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000722:	600a      	str	r2, [r1, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff09 	bl	800053c <update7SEG2>
			++counter;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000732:	6013      	str	r3, [r2, #0]
			if(counter==2){
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d10c      	bne.n	8000756 <display_Traffic_mode1+0x1a2>
				time_Red_update--;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <display_Traffic_mode1+0x1e8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3b01      	subs	r3, #1
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <display_Traffic_mode1+0x1e8>)
 8000744:	6013      	str	r3, [r2, #0]
				time_Yellow_update--;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <display_Traffic_mode1+0x200>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <display_Traffic_mode1+0x200>)
 800074e:	6013      	str	r3, [r2, #0]
				counter=0;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
			}
			if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2202      	movs	r2, #2
 800075c:	4293      	cmp	r3, r2
 800075e:	da04      	bge.n	800076a <display_Traffic_mode1+0x1b6>
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2202      	movs	r2, #2
 8000766:	4293      	cmp	r3, r2
 8000768:	db05      	blt.n	8000776 <display_Traffic_mode1+0x1c2>
				index_led1=0;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <display_Traffic_mode1+0x1f4>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
				index_led2=0;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <display_Traffic_mode1+0x1f8>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
			}
			setTimer1(250);
 8000776:	20fa      	movs	r0, #250	; 0xfa
 8000778:	f000 ff3a 	bl	80015f0 <setTimer1>
		}
		if(time_Red_update <= 0){
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <display_Traffic_mode1+0x1e8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	f300 80f7 	bgt.w	8000974 <display_Traffic_mode1+0x3c0>
			status_Traffic = statusGreen1;
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <display_Traffic_mode1+0x1e0>)
 8000788:	2202      	movs	r2, #2
 800078a:	701a      	strb	r2, [r3, #0]
			counter=0;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <display_Traffic_mode1+0x1fc>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
		}
		break;
 8000792:	e0ef      	b.n	8000974 <display_Traffic_mode1+0x3c0>
 8000794:	20000079 	.word	0x20000079
 8000798:	40010800 	.word	0x40010800
 800079c:	20000018 	.word	0x20000018
 80007a0:	20000024 	.word	0x20000024
 80007a4:	200000a8 	.word	0x200000a8
 80007a8:	20000060 	.word	0x20000060
 80007ac:	20000064 	.word	0x20000064
 80007b0:	20000074 	.word	0x20000074
 80007b4:	20000030 	.word	0x20000030
	case statusGreen1:
		HAL_GPIO_WritePin(GPIOA,LR1_Pin,GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2102      	movs	r1, #2
 80007bc:	4883      	ldr	r0, [pc, #524]	; (80009cc <display_Traffic_mode1+0x418>)
 80007be:	f001 fade 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY1_Pin,GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2104      	movs	r1, #4
 80007c6:	4881      	ldr	r0, [pc, #516]	; (80009cc <display_Traffic_mode1+0x418>)
 80007c8:	f001 fad9 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG1_Pin,GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2108      	movs	r1, #8
 80007d0:	487e      	ldr	r0, [pc, #504]	; (80009cc <display_Traffic_mode1+0x418>)
 80007d2:	f001 fad4 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LR2_Pin,GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2110      	movs	r1, #16
 80007da:	487c      	ldr	r0, [pc, #496]	; (80009cc <display_Traffic_mode1+0x418>)
 80007dc:	f001 facf 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY2_Pin,GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2120      	movs	r1, #32
 80007e4:	4879      	ldr	r0, [pc, #484]	; (80009cc <display_Traffic_mode1+0x418>)
 80007e6:	f001 faca 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG2_Pin,GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2140      	movs	r1, #64	; 0x40
 80007ee:	4877      	ldr	r0, [pc, #476]	; (80009cc <display_Traffic_mode1+0x418>)
 80007f0:	f001 fac5 	bl	8001d7e <HAL_GPIO_WritePin>
		updateTrafficBuffer(time_Green_update, time_Red_update);
 80007f4:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <display_Traffic_mode1+0x41c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a76      	ldr	r2, [pc, #472]	; (80009d4 <display_Traffic_mode1+0x420>)
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fe16 	bl	8000430 <updateTrafficBuffer>
		if(timer1_flag == 1){
 8000804:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <display_Traffic_mode1+0x424>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d138      	bne.n	800087e <display_Traffic_mode1+0x2ca>
			update7SEG1(index_led1++);
 800080c:	4b73      	ldr	r3, [pc, #460]	; (80009dc <display_Traffic_mode1+0x428>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	4972      	ldr	r1, [pc, #456]	; (80009dc <display_Traffic_mode1+0x428>)
 8000814:	600a      	str	r2, [r1, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe54 	bl	80004c4 <update7SEG1>
			update7SEG2(index_led2++);
 800081c:	4b70      	ldr	r3, [pc, #448]	; (80009e0 <display_Traffic_mode1+0x42c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	496f      	ldr	r1, [pc, #444]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000824:	600a      	str	r2, [r1, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe88 	bl	800053c <update7SEG2>
			++counter;
 800082c:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <display_Traffic_mode1+0x430>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a6c      	ldr	r2, [pc, #432]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000834:	6013      	str	r3, [r2, #0]
			if(counter == 2){
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d10c      	bne.n	8000858 <display_Traffic_mode1+0x2a4>
				time_Red_update--;
 800083e:	4b65      	ldr	r3, [pc, #404]	; (80009d4 <display_Traffic_mode1+0x420>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	4a63      	ldr	r2, [pc, #396]	; (80009d4 <display_Traffic_mode1+0x420>)
 8000846:	6013      	str	r3, [r2, #0]
				time_Green_update--;
 8000848:	4b61      	ldr	r3, [pc, #388]	; (80009d0 <display_Traffic_mode1+0x41c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	4a60      	ldr	r2, [pc, #384]	; (80009d0 <display_Traffic_mode1+0x41c>)
 8000850:	6013      	str	r3, [r2, #0]
				counter = 0;
 8000852:	4b64      	ldr	r3, [pc, #400]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			}
			if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000858:	4b60      	ldr	r3, [pc, #384]	; (80009dc <display_Traffic_mode1+0x428>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2202      	movs	r2, #2
 800085e:	4293      	cmp	r3, r2
 8000860:	da04      	bge.n	800086c <display_Traffic_mode1+0x2b8>
 8000862:	4b5f      	ldr	r3, [pc, #380]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2202      	movs	r2, #2
 8000868:	4293      	cmp	r3, r2
 800086a:	db05      	blt.n	8000878 <display_Traffic_mode1+0x2c4>
				index_led1=0;
 800086c:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <display_Traffic_mode1+0x428>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
				index_led2=0;
 8000872:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
			}
			setTimer1(250);
 8000878:	20fa      	movs	r0, #250	; 0xfa
 800087a:	f000 feb9 	bl	80015f0 <setTimer1>
		}
		if(time_Green_update <= 0){
 800087e:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <display_Traffic_mode1+0x41c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dc78      	bgt.n	8000978 <display_Traffic_mode1+0x3c4>
			status_Traffic = statusRed2;
 8000886:	4b58      	ldr	r3, [pc, #352]	; (80009e8 <display_Traffic_mode1+0x434>)
 8000888:	2203      	movs	r2, #3
 800088a:	701a      	strb	r2, [r3, #0]
			counter = 0;
 800088c:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <display_Traffic_mode1+0x430>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
		}
		break;
 8000892:	e071      	b.n	8000978 <display_Traffic_mode1+0x3c4>
	case statusRed2:
		HAL_GPIO_WritePin(GPIOA,LR1_Pin,GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2102      	movs	r1, #2
 8000898:	484c      	ldr	r0, [pc, #304]	; (80009cc <display_Traffic_mode1+0x418>)
 800089a:	f001 fa70 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY1_Pin,GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2104      	movs	r1, #4
 80008a2:	484a      	ldr	r0, [pc, #296]	; (80009cc <display_Traffic_mode1+0x418>)
 80008a4:	f001 fa6b 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG1_Pin,GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2108      	movs	r1, #8
 80008ac:	4847      	ldr	r0, [pc, #284]	; (80009cc <display_Traffic_mode1+0x418>)
 80008ae:	f001 fa66 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LR2_Pin,GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2110      	movs	r1, #16
 80008b6:	4845      	ldr	r0, [pc, #276]	; (80009cc <display_Traffic_mode1+0x418>)
 80008b8:	f001 fa61 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LY2_Pin,GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2120      	movs	r1, #32
 80008c0:	4842      	ldr	r0, [pc, #264]	; (80009cc <display_Traffic_mode1+0x418>)
 80008c2:	f001 fa5c 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LG2_Pin,GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4840      	ldr	r0, [pc, #256]	; (80009cc <display_Traffic_mode1+0x418>)
 80008cc:	f001 fa57 	bl	8001d7e <HAL_GPIO_WritePin>
		updateTrafficBuffer(time_Yellow_update, time_Red_update);
 80008d0:	4b46      	ldr	r3, [pc, #280]	; (80009ec <display_Traffic_mode1+0x438>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a3f      	ldr	r2, [pc, #252]	; (80009d4 <display_Traffic_mode1+0x420>)
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fda8 	bl	8000430 <updateTrafficBuffer>
		if(timer1_flag == 1){
 80008e0:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <display_Traffic_mode1+0x424>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d138      	bne.n	800095a <display_Traffic_mode1+0x3a6>
			update7SEG1(index_led1++);
 80008e8:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <display_Traffic_mode1+0x428>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	493b      	ldr	r1, [pc, #236]	; (80009dc <display_Traffic_mode1+0x428>)
 80008f0:	600a      	str	r2, [r1, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fde6 	bl	80004c4 <update7SEG1>
			update7SEG2(index_led2++);
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <display_Traffic_mode1+0x42c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	4938      	ldr	r1, [pc, #224]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000900:	600a      	str	r2, [r1, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe1a 	bl	800053c <update7SEG2>
			++counter;
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <display_Traffic_mode1+0x430>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000910:	6013      	str	r3, [r2, #0]
			if(counter == 2){
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d10c      	bne.n	8000934 <display_Traffic_mode1+0x380>
				time_Red_update--;
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <display_Traffic_mode1+0x420>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <display_Traffic_mode1+0x420>)
 8000922:	6013      	str	r3, [r2, #0]
				time_Yellow_update--;
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <display_Traffic_mode1+0x438>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <display_Traffic_mode1+0x438>)
 800092c:	6013      	str	r3, [r2, #0]
				counter = 0;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <display_Traffic_mode1+0x430>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
			}
			if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <display_Traffic_mode1+0x428>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2202      	movs	r2, #2
 800093a:	4293      	cmp	r3, r2
 800093c:	da04      	bge.n	8000948 <display_Traffic_mode1+0x394>
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2202      	movs	r2, #2
 8000944:	4293      	cmp	r3, r2
 8000946:	db05      	blt.n	8000954 <display_Traffic_mode1+0x3a0>
				index_led1=0;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <display_Traffic_mode1+0x428>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
				index_led2=0;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <display_Traffic_mode1+0x42c>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
			}
			setTimer1(250);
 8000954:	20fa      	movs	r0, #250	; 0xfa
 8000956:	f000 fe4b 	bl	80015f0 <setTimer1>
		}
		if(time_Red_update <= 0){
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <display_Traffic_mode1+0x420>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	dc0c      	bgt.n	800097c <display_Traffic_mode1+0x3c8>
			status_Traffic = statusRed1;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <display_Traffic_mode1+0x434>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <display_Traffic_mode1+0x430>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
		}
		break;
 800096e:	e005      	b.n	800097c <display_Traffic_mode1+0x3c8>
		break;
 8000970:	bf00      	nop
 8000972:	e004      	b.n	800097e <display_Traffic_mode1+0x3ca>
		break;
 8000974:	bf00      	nop
 8000976:	e002      	b.n	800097e <display_Traffic_mode1+0x3ca>
		break;
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <display_Traffic_mode1+0x3ca>
		break;
 800097c:	bf00      	nop
	}
	counter_Red_update = time_Red_update;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <display_Traffic_mode1+0x420>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <display_Traffic_mode1+0x43c>)
 8000984:	6013      	str	r3, [r2, #0]
	counter_Yellow_update = time_Yellow_update;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <display_Traffic_mode1+0x438>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <display_Traffic_mode1+0x440>)
 800098c:	6013      	str	r3, [r2, #0]
	counter_Green_update = time_Green_update;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <display_Traffic_mode1+0x41c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <display_Traffic_mode1+0x444>)
 8000994:	6013      	str	r3, [r2, #0]
	if(time_Red_update<=0) time_Red_update = counter_Red_update;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <display_Traffic_mode1+0x420>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	dc03      	bgt.n	80009a6 <display_Traffic_mode1+0x3f2>
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <display_Traffic_mode1+0x43c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <display_Traffic_mode1+0x420>)
 80009a4:	6013      	str	r3, [r2, #0]
	if(time_Green_update<=0) time_Green_update = counter_Green_update;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <display_Traffic_mode1+0x41c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dc03      	bgt.n	80009b6 <display_Traffic_mode1+0x402>
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <display_Traffic_mode1+0x444>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <display_Traffic_mode1+0x41c>)
 80009b4:	6013      	str	r3, [r2, #0]
	if(time_Yellow_update<=0) time_Yellow_update = counter_Yellow_update;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <display_Traffic_mode1+0x438>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc03      	bgt.n	80009c6 <display_Traffic_mode1+0x412>
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <display_Traffic_mode1+0x440>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <display_Traffic_mode1+0x438>)
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010800 	.word	0x40010800
 80009d0:	20000024 	.word	0x20000024
 80009d4:	20000018 	.word	0x20000018
 80009d8:	200000a8 	.word	0x200000a8
 80009dc:	20000060 	.word	0x20000060
 80009e0:	20000064 	.word	0x20000064
 80009e4:	20000074 	.word	0x20000074
 80009e8:	20000079 	.word	0x20000079
 80009ec:	20000030 	.word	0x20000030
 80009f0:	20000014 	.word	0x20000014
 80009f4:	2000002c 	.word	0x2000002c
 80009f8:	20000020 	.word	0x20000020

080009fc <display_Traffic_mode2>:

int status_binking_red=0;
void display_Traffic_mode2(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <display_Traffic_mode2+0xb8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d121      	bne.n	8000a4c <display_Traffic_mode2+0x50>
		switch(status_binking_red){
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <display_Traffic_mode2+0xbc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <display_Traffic_mode2+0x1a>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d009      	beq.n	8000a28 <display_Traffic_mode2+0x2c>
 8000a14:	e011      	b.n	8000a3a <display_Traffic_mode2+0x3e>
		case 0:
			HAL_GPIO_WritePin(GPIOA, LR1_Pin|LR2_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2112      	movs	r1, #18
 8000a1a:	4828      	ldr	r0, [pc, #160]	; (8000abc <display_Traffic_mode2+0xc0>)
 8000a1c:	f001 f9af 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_red=1;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <display_Traffic_mode2+0xbc>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
			break;
 8000a26:	e008      	b.n	8000a3a <display_Traffic_mode2+0x3e>
		case 1:
			HAL_GPIO_WritePin(GPIOA, LR1_Pin|LR2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2112      	movs	r1, #18
 8000a2c:	4823      	ldr	r0, [pc, #140]	; (8000abc <display_Traffic_mode2+0xc0>)
 8000a2e:	f001 f9a6 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_red=0;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <display_Traffic_mode2+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
			break;
 8000a38:	bf00      	nop
		}
		HAL_GPIO_WritePin(GPIOA, LY1_Pin|LY2_Pin|LG1_Pin|LG2_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	216c      	movs	r1, #108	; 0x6c
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <display_Traffic_mode2+0xc0>)
 8000a40:	f001 f99d 	bl	8001d7e <HAL_GPIO_WritePin>
		setTimer2(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f000 fdee 	bl	8001628 <setTimer2>
	}
	time_Red_current = counter_Red_update;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <display_Traffic_mode2+0xc4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <display_Traffic_mode2+0xc8>)
 8000a52:	6013      	str	r3, [r2, #0]
	updateTrafficBuffer(time_Red_current,2);
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <display_Traffic_mode2+0xc8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fce8 	bl	8000430 <updateTrafficBuffer>
	if(timer1_flag == 1){
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <display_Traffic_mode2+0xcc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d122      	bne.n	8000aae <display_Traffic_mode2+0xb2>
		update7SEG1(index_led1++);
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <display_Traffic_mode2+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	4917      	ldr	r1, [pc, #92]	; (8000acc <display_Traffic_mode2+0xd0>)
 8000a70:	600a      	str	r2, [r1, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd26 	bl	80004c4 <update7SEG1>
		update7SEG2(index_led2++);
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <display_Traffic_mode2+0xd4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	4914      	ldr	r1, [pc, #80]	; (8000ad0 <display_Traffic_mode2+0xd4>)
 8000a80:	600a      	str	r2, [r1, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd5a 	bl	800053c <update7SEG2>
		if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <display_Traffic_mode2+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	da04      	bge.n	8000a9c <display_Traffic_mode2+0xa0>
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <display_Traffic_mode2+0xd4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2202      	movs	r2, #2
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	db05      	blt.n	8000aa8 <display_Traffic_mode2+0xac>
			index_led1=0;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <display_Traffic_mode2+0xd0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
			index_led2=0;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <display_Traffic_mode2+0xd4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		}
		setTimer1(250);
 8000aa8:	20fa      	movs	r0, #250	; 0xfa
 8000aaa:	f000 fda1 	bl	80015f0 <setTimer1>
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	20000068 	.word	0x20000068
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	20000014 	.word	0x20000014
 8000ac4:	20000010 	.word	0x20000010
 8000ac8:	200000a8 	.word	0x200000a8
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	20000064 	.word	0x20000064

08000ad4 <display_Traffic_mode3>:

int status_binking_green=0;
void display_Traffic_mode3(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <display_Traffic_mode3+0xb8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d121      	bne.n	8000b24 <display_Traffic_mode3+0x50>
		switch(status_binking_green){
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <display_Traffic_mode3+0xbc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <display_Traffic_mode3+0x1a>
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d009      	beq.n	8000b00 <display_Traffic_mode3+0x2c>
 8000aec:	e011      	b.n	8000b12 <display_Traffic_mode3+0x3e>
		case 0:
			HAL_GPIO_WritePin(GPIOA, LY1_Pin|LY2_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2124      	movs	r1, #36	; 0x24
 8000af2:	4828      	ldr	r0, [pc, #160]	; (8000b94 <display_Traffic_mode3+0xc0>)
 8000af4:	f001 f943 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_green=1;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <display_Traffic_mode3+0xbc>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
			break;
 8000afe:	e008      	b.n	8000b12 <display_Traffic_mode3+0x3e>
		case 1:
			HAL_GPIO_WritePin(GPIOA, LY1_Pin|LY2_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2124      	movs	r1, #36	; 0x24
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <display_Traffic_mode3+0xc0>)
 8000b06:	f001 f93a 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_green=0;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <display_Traffic_mode3+0xbc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
			break;
 8000b10:	bf00      	nop
		}
		HAL_GPIO_WritePin(GPIOA, LR1_Pin|LR2_Pin|LG1_Pin|LG2_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	215a      	movs	r1, #90	; 0x5a
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <display_Traffic_mode3+0xc0>)
 8000b18:	f001 f931 	bl	8001d7e <HAL_GPIO_WritePin>
		setTimer2(500);
 8000b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b20:	f000 fd82 	bl	8001628 <setTimer2>
	}
	time_Yellow_current = counter_Yellow_update;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <display_Traffic_mode3+0xc4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <display_Traffic_mode3+0xc8>)
 8000b2a:	6013      	str	r3, [r2, #0]
	updateTrafficBuffer(time_Yellow_current,3);
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <display_Traffic_mode3+0xc8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2103      	movs	r1, #3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fc7c 	bl	8000430 <updateTrafficBuffer>
	if(timer1_flag == 1){
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <display_Traffic_mode3+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d122      	bne.n	8000b86 <display_Traffic_mode3+0xb2>
		update7SEG1(index_led1++);
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <display_Traffic_mode3+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	4917      	ldr	r1, [pc, #92]	; (8000ba4 <display_Traffic_mode3+0xd0>)
 8000b48:	600a      	str	r2, [r1, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fcba 	bl	80004c4 <update7SEG1>
		update7SEG2(index_led2++);
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <display_Traffic_mode3+0xd4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	4914      	ldr	r1, [pc, #80]	; (8000ba8 <display_Traffic_mode3+0xd4>)
 8000b58:	600a      	str	r2, [r1, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fcee 	bl	800053c <update7SEG2>
		if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <display_Traffic_mode3+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2202      	movs	r2, #2
 8000b66:	4293      	cmp	r3, r2
 8000b68:	da04      	bge.n	8000b74 <display_Traffic_mode3+0xa0>
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <display_Traffic_mode3+0xd4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4293      	cmp	r3, r2
 8000b72:	db05      	blt.n	8000b80 <display_Traffic_mode3+0xac>
			index_led1=0;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <display_Traffic_mode3+0xd0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
			index_led2=0;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <display_Traffic_mode3+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		}
		setTimer1(250);
 8000b80:	20fa      	movs	r0, #250	; 0xfa
 8000b82:	f000 fd35 	bl	80015f0 <setTimer1>
	}
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000b0 	.word	0x200000b0
 8000b90:	2000006c 	.word	0x2000006c
 8000b94:	40010800 	.word	0x40010800
 8000b98:	2000002c 	.word	0x2000002c
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	200000a8 	.word	0x200000a8
 8000ba4:	20000060 	.word	0x20000060
 8000ba8:	20000064 	.word	0x20000064

08000bac <display_Traffic_mode4>:

int status_binking_yellow=0;
void display_Traffic_mode4(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <display_Traffic_mode4+0xb8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d121      	bne.n	8000bfc <display_Traffic_mode4+0x50>
		switch(status_binking_yellow){
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <display_Traffic_mode4+0xbc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <display_Traffic_mode4+0x1a>
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d009      	beq.n	8000bd8 <display_Traffic_mode4+0x2c>
 8000bc4:	e011      	b.n	8000bea <display_Traffic_mode4+0x3e>
		case 0:
			HAL_GPIO_WritePin(GPIOA, LG1_Pin|LG2_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2148      	movs	r1, #72	; 0x48
 8000bca:	4828      	ldr	r0, [pc, #160]	; (8000c6c <display_Traffic_mode4+0xc0>)
 8000bcc:	f001 f8d7 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_yellow=1;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <display_Traffic_mode4+0xbc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
			break;
 8000bd6:	e008      	b.n	8000bea <display_Traffic_mode4+0x3e>
		case 1:
			HAL_GPIO_WritePin(GPIOA, LG1_Pin|LG2_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2148      	movs	r1, #72	; 0x48
 8000bdc:	4823      	ldr	r0, [pc, #140]	; (8000c6c <display_Traffic_mode4+0xc0>)
 8000bde:	f001 f8ce 	bl	8001d7e <HAL_GPIO_WritePin>
			status_binking_yellow=0;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <display_Traffic_mode4+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
			break;
 8000be8:	bf00      	nop
		}
		HAL_GPIO_WritePin(GPIOA, LR1_Pin|LR2_Pin|LY1_Pin|LY2_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2136      	movs	r1, #54	; 0x36
 8000bee:	481f      	ldr	r0, [pc, #124]	; (8000c6c <display_Traffic_mode4+0xc0>)
 8000bf0:	f001 f8c5 	bl	8001d7e <HAL_GPIO_WritePin>
		setTimer2(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f000 fd16 	bl	8001628 <setTimer2>
	}
	time_Green_current = counter_Green_update;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <display_Traffic_mode4+0xc4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <display_Traffic_mode4+0xc8>)
 8000c02:	6013      	str	r3, [r2, #0]
	updateTrafficBuffer(time_Green_current,4);
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <display_Traffic_mode4+0xc8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fc10 	bl	8000430 <updateTrafficBuffer>
	if(timer1_flag == 1){
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <display_Traffic_mode4+0xcc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d122      	bne.n	8000c5e <display_Traffic_mode4+0xb2>
		update7SEG1(index_led1++);
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <display_Traffic_mode4+0xd0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	4917      	ldr	r1, [pc, #92]	; (8000c7c <display_Traffic_mode4+0xd0>)
 8000c20:	600a      	str	r2, [r1, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fc4e 	bl	80004c4 <update7SEG1>
		update7SEG2(index_led2++);
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <display_Traffic_mode4+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	4914      	ldr	r1, [pc, #80]	; (8000c80 <display_Traffic_mode4+0xd4>)
 8000c30:	600a      	str	r2, [r1, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc82 	bl	800053c <update7SEG2>
		if(index_led1>=MAX_LED || index_led2>=MAX_LED){
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <display_Traffic_mode4+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	da04      	bge.n	8000c4c <display_Traffic_mode4+0xa0>
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <display_Traffic_mode4+0xd4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2202      	movs	r2, #2
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	db05      	blt.n	8000c58 <display_Traffic_mode4+0xac>
			index_led1=0;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <display_Traffic_mode4+0xd0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
			index_led2=0;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <display_Traffic_mode4+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
		}
		setTimer1(250);
 8000c58:	20fa      	movs	r0, #250	; 0xfa
 8000c5a:	f000 fcc9 	bl	80015f0 <setTimer1>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000b0 	.word	0x200000b0
 8000c68:	20000070 	.word	0x20000070
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	20000020 	.word	0x20000020
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	200000a8 	.word	0x200000a8
 8000c7c:	20000060 	.word	0x20000060
 8000c80:	20000064 	.word	0x20000064

08000c84 <display_Traffic>:

void display_Traffic(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	if(Mode == MODE1){
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <display_Traffic+0x38>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d101      	bne.n	8000c94 <display_Traffic+0x10>
		display_Traffic_mode1();
 8000c90:	f7ff fc90 	bl	80005b4 <display_Traffic_mode1>
	}
	if(Mode == MODE2){
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <display_Traffic+0x38>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d101      	bne.n	8000ca0 <display_Traffic+0x1c>
		display_Traffic_mode2();
 8000c9c:	f7ff feae 	bl	80009fc <display_Traffic_mode2>
	}
	if(Mode == MODE3){
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <display_Traffic+0x38>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d101      	bne.n	8000cac <display_Traffic+0x28>
		display_Traffic_mode3();
 8000ca8:	f7ff ff14 	bl	8000ad4 <display_Traffic_mode3>
	}
	if(Mode == MODE4){
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <display_Traffic+0x38>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d101      	bne.n	8000cb8 <display_Traffic+0x34>
		display_Traffic_mode4();
 8000cb4:	f7ff ff7a 	bl	8000bac <display_Traffic_mode4>
	}
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000078 	.word	0x20000078

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fd5a 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f81a 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 f8a0 	bl	8000e10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f852 	bl	8000d78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <main+0x3c>)
 8000cd6:	f001 fca3 	bl	8002620 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
 8000cda:	200a      	movs	r0, #10
 8000cdc:	f000 fc6c 	bl	80015b8 <setTimer0>
  setTimer1(10);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f000 fc85 	bl	80015f0 <setTimer1>
  setTimer2(10);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f000 fc9e 	bl	8001628 <setTimer2>
  clearAll();
 8000cec:	f7ff fa2e 	bl	800014c <clearAll>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 8000cf0:	f000 f8f6 	bl	8000ee0 <fsm_for_input_processing>
	  display_Traffic();
 8000cf4:	f7ff ffc6 	bl	8000c84 <display_Traffic>
	  fsm_for_input_processing();
 8000cf8:	e7fa      	b.n	8000cf0 <main+0x30>
 8000cfa:	bf00      	nop
 8000cfc:	200000bc 	.word	0x200000bc

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2228      	movs	r2, #40	; 0x28
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 f83e 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f83a 	bl	8001db0 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d42:	f000 f8c7 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 faa6 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 f8b3 	bl	8000ed4 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3740      	adds	r7, #64	; 0x40
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000d9e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000dac:	2209      	movs	r2, #9
 8000dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000dbe:	f001 fbdf 	bl	8002580 <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dc8:	f000 f884 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000dda:	f001 fd75 	bl	80028c8 <HAL_TIM_ConfigClockSource>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000de4:	f000 f876 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_TIM2_Init+0x94>)
 8000df6:	f001 ff3d 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e00:	f000 f868 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000bc 	.word	0x200000bc

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR1_Pin|LY1_Pin|LG1_Pin|LR2_Pin
 8000e54:	2200      	movs	r2, #0
 8000e56:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_GPIO_Init+0xbc>)
 8000e5c:	f000 ff8f 	bl	8001d7e <HAL_GPIO_WritePin>
                          |LY2_Pin|LG2_Pin|LED_Pin|SEG_7_Pin
                          |SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin
                          |SEG_12_Pin|SEG_13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000e60:	2200      	movs	r2, #0
 8000e62:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 8000e66:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <MX_GPIO_Init+0xc0>)
 8000e68:	f000 ff89 	bl	8001d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LR1_Pin LY1_Pin LG1_Pin LR2_Pin
                           LY2_Pin LG2_Pin LED_Pin SEG_7_Pin
                           SEG_8_Pin SEG_9_Pin SEG_10_Pin SEG_11_Pin
                           SEG_12_Pin SEG_13_Pin */
  GPIO_InitStruct.Pin = LR1_Pin|LY1_Pin|LG1_Pin|LR2_Pin
 8000e6c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000e70:	60bb      	str	r3, [r7, #8]
                          |LY2_Pin|LG2_Pin|LED_Pin|SEG_7_Pin
                          |SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin
                          |SEG_12_Pin|SEG_13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_GPIO_Init+0xbc>)
 8000e86:	f000 fde9 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_GPIO_Init+0xc0>)
 8000e9e:	f000 fddd 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 8000ea2:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000ea6:	60bb      	str	r3, [r7, #8]
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0xc0>)
 8000ebc:	f000 fdce 	bl	8001a5c <HAL_GPIO_Init>

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <fsm_for_input_processing>:
int a;
#define DUARATION_AUTO_IRC 		50
#define NO_OF_BUTTONS 			3
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void fsm_for_input_processing(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	switch(buttonState){
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	; (8001168 <fsm_for_input_processing+0x288>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d04b      	beq.n	8000f84 <fsm_for_input_processing+0xa4>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	dc58      	bgt.n	8000fa2 <fsm_for_input_processing+0xc2>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <fsm_for_input_processing+0x1a>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d031      	beq.n	8000f5c <fsm_for_input_processing+0x7c>
 8000ef8:	e053      	b.n	8000fa2 <fsm_for_input_processing+0xc2>
	case BUTTON_RELEASED:
		if(is_button_pressed(0)){
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fa9a 	bl	8001434 <is_button_pressed>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d028      	beq.n	8000f58 <fsm_for_input_processing+0x78>
			buttonState = BUTTON_PRESSED;
 8000f06:	4b98      	ldr	r3, [pc, #608]	; (8001168 <fsm_for_input_processing+0x288>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
			switch(Mode){
 8000f0c:	4b97      	ldr	r3, [pc, #604]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d841      	bhi.n	8000f98 <fsm_for_input_processing+0xb8>
 8000f14:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <fsm_for_input_processing+0x3c>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f31 	.word	0x08000f31
 8000f20:	08000f39 	.word	0x08000f39
 8000f24:	08000f41 	.word	0x08000f41
 8000f28:	08000f49 	.word	0x08000f49
 8000f2c:	08000f51 	.word	0x08000f51
			case INIT:
				Mode = MODE1;
 8000f30:	4b8e      	ldr	r3, [pc, #568]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
				break;
 8000f36:	e010      	b.n	8000f5a <fsm_for_input_processing+0x7a>
			case MODE1:
				Mode = MODE2;
 8000f38:	4b8c      	ldr	r3, [pc, #560]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
				break;
 8000f3e:	e00c      	b.n	8000f5a <fsm_for_input_processing+0x7a>
			case MODE2:
				Mode = MODE3;
 8000f40:	4b8a      	ldr	r3, [pc, #552]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	701a      	strb	r2, [r3, #0]
				break;
 8000f46:	e008      	b.n	8000f5a <fsm_for_input_processing+0x7a>
			case MODE3:
				Mode = MODE4;
 8000f48:	4b88      	ldr	r3, [pc, #544]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	701a      	strb	r2, [r3, #0]
				break;
 8000f4e:	e004      	b.n	8000f5a <fsm_for_input_processing+0x7a>
			case MODE4:
				Mode = MODE1;
 8000f50:	4b86      	ldr	r3, [pc, #536]	; (800116c <fsm_for_input_processing+0x28c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
				break;
 8000f56:	e000      	b.n	8000f5a <fsm_for_input_processing+0x7a>
			}
		}
 8000f58:	bf00      	nop
		break;
 8000f5a:	e01d      	b.n	8000f98 <fsm_for_input_processing+0xb8>
	case BUTTON_PRESSED:
		if(!is_button_pressed(0)){
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fa69 	bl	8001434 <is_button_pressed>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <fsm_for_input_processing+0x90>
			buttonState = BUTTON_RELEASED;
 8000f68:	4b7f      	ldr	r3, [pc, #508]	; (8001168 <fsm_for_input_processing+0x288>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		else{
			if(is_button_pressed_1s(0)){
				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 8000f6e:	e015      	b.n	8000f9c <fsm_for_input_processing+0xbc>
			if(is_button_pressed_1s(0)){
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 fa79 	bl	8001468 <is_button_pressed_1s>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00f      	beq.n	8000f9c <fsm_for_input_processing+0xbc>
				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000f7c:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <fsm_for_input_processing+0x288>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	701a      	strb	r2, [r3, #0]
		break;
 8000f82:	e00b      	b.n	8000f9c <fsm_for_input_processing+0xbc>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if(!is_button_pressed_1s(0)){
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 fa6f 	bl	8001468 <is_button_pressed_1s>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <fsm_for_input_processing+0xc0>
			buttonState = BUTTON_RELEASED;
 8000f90:	4b75      	ldr	r3, [pc, #468]	; (8001168 <fsm_for_input_processing+0x288>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f96:	e003      	b.n	8000fa0 <fsm_for_input_processing+0xc0>
		break;
 8000f98:	bf00      	nop
 8000f9a:	e002      	b.n	8000fa2 <fsm_for_input_processing+0xc2>
		break;
 8000f9c:	bf00      	nop
 8000f9e:	e000      	b.n	8000fa2 <fsm_for_input_processing+0xc2>
		break;
 8000fa0:	bf00      	nop
	}
	switch(buttonState1){
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <fsm_for_input_processing+0x290>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d056      	beq.n	8001058 <fsm_for_input_processing+0x178>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f300 80a3 	bgt.w	80010f6 <fsm_for_input_processing+0x216>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <fsm_for_input_processing+0xda>
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d03b      	beq.n	8001030 <fsm_for_input_processing+0x150>
 8000fb8:	e09d      	b.n	80010f6 <fsm_for_input_processing+0x216>
		case BUTTON_RELEASED:
			if(is_button_pressed(1)){
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 fa3a 	bl	8001434 <is_button_pressed>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8092 	beq.w	80010ec <fsm_for_input_processing+0x20c>
				buttonState1 = BUTTON_PRESSED;
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <fsm_for_input_processing+0x290>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
				if(Mode == MODE2){
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <fsm_for_input_processing+0x28c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d10b      	bne.n	8000fee <fsm_for_input_processing+0x10e>
					counter_Red_update++;
 8000fd6:	4b67      	ldr	r3, [pc, #412]	; (8001174 <fsm_for_input_processing+0x294>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a65      	ldr	r2, [pc, #404]	; (8001174 <fsm_for_input_processing+0x294>)
 8000fde:	6013      	str	r3, [r2, #0]
					if(counter_Red_update>=99) counter_Red_update = 1;
 8000fe0:	4b64      	ldr	r3, [pc, #400]	; (8001174 <fsm_for_input_processing+0x294>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b62      	cmp	r3, #98	; 0x62
 8000fe6:	dd02      	ble.n	8000fee <fsm_for_input_processing+0x10e>
 8000fe8:	4b62      	ldr	r3, [pc, #392]	; (8001174 <fsm_for_input_processing+0x294>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
				}
				if(Mode == MODE3){
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <fsm_for_input_processing+0x28c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d10b      	bne.n	800100e <fsm_for_input_processing+0x12e>
					counter_Yellow_update++;
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <fsm_for_input_processing+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <fsm_for_input_processing+0x298>)
 8000ffe:	6013      	str	r3, [r2, #0]
					if(counter_Yellow_update>=99) counter_Yellow_update = 1;
 8001000:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <fsm_for_input_processing+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b62      	cmp	r3, #98	; 0x62
 8001006:	dd02      	ble.n	800100e <fsm_for_input_processing+0x12e>
 8001008:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <fsm_for_input_processing+0x298>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
				}
				if(Mode == MODE4){
 800100e:	4b57      	ldr	r3, [pc, #348]	; (800116c <fsm_for_input_processing+0x28c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d16a      	bne.n	80010ec <fsm_for_input_processing+0x20c>
					counter_Green_update++;
 8001016:	4b59      	ldr	r3, [pc, #356]	; (800117c <fsm_for_input_processing+0x29c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a57      	ldr	r2, [pc, #348]	; (800117c <fsm_for_input_processing+0x29c>)
 800101e:	6013      	str	r3, [r2, #0]
					if(counter_Green_update>=99) counter_Green_update = 1;
 8001020:	4b56      	ldr	r3, [pc, #344]	; (800117c <fsm_for_input_processing+0x29c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b62      	cmp	r3, #98	; 0x62
 8001026:	dd61      	ble.n	80010ec <fsm_for_input_processing+0x20c>
 8001028:	4b54      	ldr	r3, [pc, #336]	; (800117c <fsm_for_input_processing+0x29c>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800102e:	e05d      	b.n	80010ec <fsm_for_input_processing+0x20c>
		case BUTTON_PRESSED:
			if(!is_button_pressed(1)){
 8001030:	2001      	movs	r0, #1
 8001032:	f000 f9ff 	bl	8001434 <is_button_pressed>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <fsm_for_input_processing+0x164>
				buttonState1 = BUTTON_RELEASED;
 800103c:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <fsm_for_input_processing+0x290>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			else{
				if(is_button_pressed_1s(1)){
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8001042:	e055      	b.n	80010f0 <fsm_for_input_processing+0x210>
				if(is_button_pressed_1s(1)){
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fa0f 	bl	8001468 <is_button_pressed_1s>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d04f      	beq.n	80010f0 <fsm_for_input_processing+0x210>
					buttonState1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8001050:	4b47      	ldr	r3, [pc, #284]	; (8001170 <fsm_for_input_processing+0x290>)
 8001052:	2202      	movs	r2, #2
 8001054:	701a      	strb	r2, [r3, #0]
			break;
 8001056:	e04b      	b.n	80010f0 <fsm_for_input_processing+0x210>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed_1s(1)){
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fa05 	bl	8001468 <is_button_pressed_1s>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <fsm_for_input_processing+0x190>
				buttonState1 = BUTTON_RELEASED;
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <fsm_for_input_processing+0x290>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
				counterForButtonPress1s[1] = 0;
 800106a:	4b45      	ldr	r3, [pc, #276]	; (8001180 <fsm_for_input_processing+0x2a0>)
 800106c:	2200      	movs	r2, #0
 800106e:	805a      	strh	r2, [r3, #2]
			}
			counterForButtonPress1s[1]++;
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <fsm_for_input_processing+0x2a0>)
 8001072:	885b      	ldrh	r3, [r3, #2]
 8001074:	3301      	adds	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <fsm_for_input_processing+0x2a0>)
 800107a:	805a      	strh	r2, [r3, #2]
			if(counterForButtonPress1s[1] >= DUARATION_AUTO_IRC){
 800107c:	4b40      	ldr	r3, [pc, #256]	; (8001180 <fsm_for_input_processing+0x2a0>)
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	2b31      	cmp	r3, #49	; 0x31
 8001082:	d937      	bls.n	80010f4 <fsm_for_input_processing+0x214>
				if(Mode == MODE2){
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <fsm_for_input_processing+0x28c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10b      	bne.n	80010a4 <fsm_for_input_processing+0x1c4>
					counter_Red_update++;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <fsm_for_input_processing+0x294>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a38      	ldr	r2, [pc, #224]	; (8001174 <fsm_for_input_processing+0x294>)
 8001094:	6013      	str	r3, [r2, #0]
					if(counter_Red_update>=99) counter_Red_update = 1;
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <fsm_for_input_processing+0x294>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b62      	cmp	r3, #98	; 0x62
 800109c:	dd02      	ble.n	80010a4 <fsm_for_input_processing+0x1c4>
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <fsm_for_input_processing+0x294>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
				}
				if(Mode == MODE3){
 80010a4:	4b31      	ldr	r3, [pc, #196]	; (800116c <fsm_for_input_processing+0x28c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d10b      	bne.n	80010c4 <fsm_for_input_processing+0x1e4>
					counter_Yellow_update++;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <fsm_for_input_processing+0x298>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <fsm_for_input_processing+0x298>)
 80010b4:	6013      	str	r3, [r2, #0]
					if(counter_Yellow_update>=99) counter_Yellow_update = 1;
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <fsm_for_input_processing+0x298>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b62      	cmp	r3, #98	; 0x62
 80010bc:	dd02      	ble.n	80010c4 <fsm_for_input_processing+0x1e4>
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <fsm_for_input_processing+0x298>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
				}
				if(Mode == MODE4){
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <fsm_for_input_processing+0x28c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d10b      	bne.n	80010e4 <fsm_for_input_processing+0x204>
					counter_Green_update++;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <fsm_for_input_processing+0x29c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <fsm_for_input_processing+0x29c>)
 80010d4:	6013      	str	r3, [r2, #0]
					if(counter_Green_update>=99) counter_Green_update = 1;
 80010d6:	4b29      	ldr	r3, [pc, #164]	; (800117c <fsm_for_input_processing+0x29c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b62      	cmp	r3, #98	; 0x62
 80010dc:	dd02      	ble.n	80010e4 <fsm_for_input_processing+0x204>
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <fsm_for_input_processing+0x29c>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
				}
				counterForButtonPress1s[1] = 0;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <fsm_for_input_processing+0x2a0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	805a      	strh	r2, [r3, #2]
			}
			break;
 80010ea:	e003      	b.n	80010f4 <fsm_for_input_processing+0x214>
			break;
 80010ec:	bf00      	nop
 80010ee:	e002      	b.n	80010f6 <fsm_for_input_processing+0x216>
			break;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <fsm_for_input_processing+0x216>
			break;
 80010f4:	bf00      	nop
		}
	switch(buttonState2){
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <fsm_for_input_processing+0x2a4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d064      	beq.n	80011c8 <fsm_for_input_processing+0x2e8>
 80010fe:	2b02      	cmp	r3, #2
 8001100:	dc71      	bgt.n	80011e6 <fsm_for_input_processing+0x306>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <fsm_for_input_processing+0x22c>
 8001106:	2b01      	cmp	r3, #1
 8001108:	d04a      	beq.n	80011a0 <fsm_for_input_processing+0x2c0>
			if(!is_button_pressed_1s(2)){
				buttonState2 = BUTTON_RELEASED;
			}
			break;
		}
}
 800110a:	e06c      	b.n	80011e6 <fsm_for_input_processing+0x306>
			if(is_button_pressed(2)){
 800110c:	2002      	movs	r0, #2
 800110e:	f000 f991 	bl	8001434 <is_button_pressed>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d061      	beq.n	80011dc <fsm_for_input_processing+0x2fc>
				buttonState2 = BUTTON_PRESSED;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <fsm_for_input_processing+0x2a4>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
				if(Mode == MODE2){
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <fsm_for_input_processing+0x28c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d107      	bne.n	8001136 <fsm_for_input_processing+0x256>
					time_Red_current = counter_Red_update;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <fsm_for_input_processing+0x294>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <fsm_for_input_processing+0x2a8>)
 800112c:	6013      	str	r3, [r2, #0]
					time_Red_update = counter_Red_update;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <fsm_for_input_processing+0x294>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <fsm_for_input_processing+0x2ac>)
 8001134:	6013      	str	r3, [r2, #0]
				if(Mode == MODE3){
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <fsm_for_input_processing+0x28c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d107      	bne.n	800114e <fsm_for_input_processing+0x26e>
					time_Yellow_current = counter_Yellow_update;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <fsm_for_input_processing+0x298>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <fsm_for_input_processing+0x2b0>)
 8001144:	6013      	str	r3, [r2, #0]
					time_Yellow_update = counter_Yellow_update;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <fsm_for_input_processing+0x298>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <fsm_for_input_processing+0x2b4>)
 800114c:	6013      	str	r3, [r2, #0]
				if(Mode == MODE4){
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <fsm_for_input_processing+0x28c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d142      	bne.n	80011dc <fsm_for_input_processing+0x2fc>
					time_Green_current = counter_Green_update;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <fsm_for_input_processing+0x29c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <fsm_for_input_processing+0x2b8>)
 800115c:	6013      	str	r3, [r2, #0]
					time_Green_update = counter_Green_update;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <fsm_for_input_processing+0x29c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <fsm_for_input_processing+0x2bc>)
 8001164:	6013      	str	r3, [r2, #0]
			break;
 8001166:	e039      	b.n	80011dc <fsm_for_input_processing+0x2fc>
 8001168:	2000007a 	.word	0x2000007a
 800116c:	20000078 	.word	0x20000078
 8001170:	2000007b 	.word	0x2000007b
 8001174:	20000014 	.word	0x20000014
 8001178:	2000002c 	.word	0x2000002c
 800117c:	20000020 	.word	0x20000020
 8001180:	20000080 	.word	0x20000080
 8001184:	2000007c 	.word	0x2000007c
 8001188:	20000010 	.word	0x20000010
 800118c:	20000018 	.word	0x20000018
 8001190:	20000028 	.word	0x20000028
 8001194:	20000030 	.word	0x20000030
 8001198:	2000001c 	.word	0x2000001c
 800119c:	20000024 	.word	0x20000024
			if(!is_button_pressed(2)){
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 f947 	bl	8001434 <is_button_pressed>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <fsm_for_input_processing+0x2d4>
				buttonState2 = BUTTON_RELEASED;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <fsm_for_input_processing+0x30c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			break;
 80011b2:	e015      	b.n	80011e0 <fsm_for_input_processing+0x300>
				if(is_button_pressed_1s(2)){
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 f957 	bl	8001468 <is_button_pressed_1s>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00f      	beq.n	80011e0 <fsm_for_input_processing+0x300>
					buttonState2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <fsm_for_input_processing+0x30c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]
			break;
 80011c6:	e00b      	b.n	80011e0 <fsm_for_input_processing+0x300>
			if(!is_button_pressed_1s(2)){
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 f94d 	bl	8001468 <is_button_pressed_1s>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d107      	bne.n	80011e4 <fsm_for_input_processing+0x304>
				buttonState2 = BUTTON_RELEASED;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <fsm_for_input_processing+0x30c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
			break;
 80011da:	e003      	b.n	80011e4 <fsm_for_input_processing+0x304>
			break;
 80011dc:	bf00      	nop
 80011de:	e002      	b.n	80011e6 <fsm_for_input_processing+0x306>
			break;
 80011e0:	bf00      	nop
 80011e2:	e000      	b.n	80011e6 <fsm_for_input_processing+0x306>
			break;
 80011e4:	bf00      	nop
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000007c 	.word	0x2000007c

080011f0 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[NO_OF_BUTTONS];

static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_reading(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	for(int i=0; i<NO_OF_BUTTONS; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	e105      	b.n	8001408 <button_reading+0x218>
		switch (i){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	f000 80ab 	beq.w	800135a <button_reading+0x16a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	f300 80fb 	bgt.w	8001402 <button_reading+0x212>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <button_reading+0x2a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d050      	beq.n	80012ba <button_reading+0xca>
 8001218:	e0f3      	b.n	8001402 <button_reading+0x212>
		case 0:
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800121a:	4a80      	ldr	r2, [pc, #512]	; (800141c <button_reading+0x22c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	4a7f      	ldr	r2, [pc, #508]	; (8001420 <button_reading+0x230>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800122c:	2101      	movs	r1, #1
 800122e:	487d      	ldr	r0, [pc, #500]	; (8001424 <button_reading+0x234>)
 8001230:	f000 fd8e 	bl	8001d50 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4a78      	ldr	r2, [pc, #480]	; (800141c <button_reading+0x22c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	460a      	mov	r2, r1
 8001240:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8001242:	4a76      	ldr	r2, [pc, #472]	; (800141c <button_reading+0x22c>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4975      	ldr	r1, [pc, #468]	; (8001420 <button_reading+0x230>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	440b      	add	r3, r1
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	f040 80d0 	bne.w	80013f8 <button_reading+0x208>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8001258:	4a70      	ldr	r2, [pc, #448]	; (800141c <button_reading+0x22c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	4a71      	ldr	r2, [pc, #452]	; (8001428 <button_reading+0x238>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	460a      	mov	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800126a:	4a6f      	ldr	r2, [pc, #444]	; (8001428 <button_reading+0x238>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d116      	bne.n	80012a4 <button_reading+0xb4>
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8001276:	4a6d      	ldr	r2, [pc, #436]	; (800142c <button_reading+0x23c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	2b63      	cmp	r3, #99	; 0x63
 8001280:	d80a      	bhi.n	8001298 <button_reading+0xa8>
					counterForButtonPress1s[i]++;
 8001282:	4a6a      	ldr	r2, [pc, #424]	; (800142c <button_reading+0x23c>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128a:	3301      	adds	r3, #1
 800128c:	b299      	uxth	r1, r3
 800128e:	4a67      	ldr	r2, [pc, #412]	; (800142c <button_reading+0x23c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			else{
				counterForButtonPress1s[i] = 0;
				flagForButtonPress1s[i] = 0;
			}
		}
		break;
 8001296:	e0af      	b.n	80013f8 <button_reading+0x208>
					flagForButtonPress1s[i] = 1;
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <button_reading+0x240>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
		break;
 80012a2:	e0a9      	b.n	80013f8 <button_reading+0x208>
				counterForButtonPress1s[i] = 0;
 80012a4:	4a61      	ldr	r2, [pc, #388]	; (800142c <button_reading+0x23c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2100      	movs	r1, #0
 80012aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80012ae:	4a60      	ldr	r2, [pc, #384]	; (8001430 <button_reading+0x240>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		break;
 80012b8:	e09e      	b.n	80013f8 <button_reading+0x208>
		case 1:
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80012ba:	4a58      	ldr	r2, [pc, #352]	; (800141c <button_reading+0x22c>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <button_reading+0x230>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	460a      	mov	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80012cc:	2102      	movs	r1, #2
 80012ce:	4855      	ldr	r0, [pc, #340]	; (8001424 <button_reading+0x234>)
 80012d0:	f000 fd3e 	bl	8001d50 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <button_reading+0x22c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	460a      	mov	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <button_reading+0x22c>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	494d      	ldr	r1, [pc, #308]	; (8001420 <button_reading+0x230>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	440b      	add	r3, r1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	f040 8082 	bne.w	80013fc <button_reading+0x20c>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <button_reading+0x22c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	7819      	ldrb	r1, [r3, #0]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <button_reading+0x238>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	460a      	mov	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <button_reading+0x238>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <button_reading+0x154>
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8001316:	4a45      	ldr	r2, [pc, #276]	; (800142c <button_reading+0x23c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131e:	2b63      	cmp	r3, #99	; 0x63
 8001320:	d80a      	bhi.n	8001338 <button_reading+0x148>
					counterForButtonPress1s[i]++;
 8001322:	4a42      	ldr	r2, [pc, #264]	; (800142c <button_reading+0x23c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	3301      	adds	r3, #1
 800132c:	b299      	uxth	r1, r3
 800132e:	4a3f      	ldr	r2, [pc, #252]	; (800142c <button_reading+0x23c>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			else{
				counterForButtonPress1s[i] = 0;
				flagForButtonPress1s[i] = 0;
			}
		}
		break;
 8001336:	e061      	b.n	80013fc <button_reading+0x20c>
					flagForButtonPress1s[i] = 1;
 8001338:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <button_reading+0x240>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
		break;
 8001342:	e05b      	b.n	80013fc <button_reading+0x20c>
				counterForButtonPress1s[i] = 0;
 8001344:	4a39      	ldr	r2, [pc, #228]	; (800142c <button_reading+0x23c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2100      	movs	r1, #0
 800134a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800134e:	4a38      	ldr	r2, [pc, #224]	; (8001430 <button_reading+0x240>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
		break;
 8001358:	e050      	b.n	80013fc <button_reading+0x20c>
		case 2:
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <button_reading+0x22c>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <button_reading+0x230>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	460a      	mov	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 800136c:	2104      	movs	r1, #4
 800136e:	482d      	ldr	r0, [pc, #180]	; (8001424 <button_reading+0x234>)
 8001370:	f000 fcee 	bl	8001d50 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <button_reading+0x22c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <button_reading+0x22c>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	4925      	ldr	r1, [pc, #148]	; (8001420 <button_reading+0x230>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	440b      	add	r3, r1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d134      	bne.n	8001400 <button_reading+0x210>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <button_reading+0x22c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	7819      	ldrb	r1, [r3, #0]
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <button_reading+0x238>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	460a      	mov	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80013a8:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <button_reading+0x238>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d116      	bne.n	80013e2 <button_reading+0x1f2>
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <button_reading+0x23c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013bc:	2b63      	cmp	r3, #99	; 0x63
 80013be:	d80a      	bhi.n	80013d6 <button_reading+0x1e6>
					counterForButtonPress1s[i]++;
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <button_reading+0x23c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b299      	uxth	r1, r3
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <button_reading+0x23c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			else{
				counterForButtonPress1s[i] = 0;
				flagForButtonPress1s[i] = 0;
			}
		}
		break;
 80013d4:	e014      	b.n	8001400 <button_reading+0x210>
					flagForButtonPress1s[i] = 1;
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <button_reading+0x240>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
		break;
 80013e0:	e00e      	b.n	8001400 <button_reading+0x210>
				counterForButtonPress1s[i] = 0;
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <button_reading+0x23c>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2100      	movs	r1, #0
 80013e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <button_reading+0x240>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		break;
 80013f6:	e003      	b.n	8001400 <button_reading+0x210>
		break;
 80013f8:	bf00      	nop
 80013fa:	e002      	b.n	8001402 <button_reading+0x212>
		break;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <button_reading+0x212>
		break;
 8001400:	bf00      	nop
	for(int i=0; i<NO_OF_BUTTONS; i++){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	f77f aef6 	ble.w	80011fc <button_reading+0xc>
		}
	}
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000088 	.word	0x20000088
 8001420:	2000008c 	.word	0x2000008c
 8001424:	40010c00 	.word	0x40010c00
 8001428:	20000034 	.word	0x20000034
 800142c:	20000094 	.word	0x20000094
 8001430:	20000090 	.word	0x20000090

08001434 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <is_button_pressed+0x14>
 8001444:	2300      	movs	r3, #0
 8001446:	e007      	b.n	8001458 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <is_button_pressed+0x30>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000034 	.word	0x20000034

08001468 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0xff;
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <is_button_pressed_1s+0x14>
 8001478:	23ff      	movs	r3, #255	; 0xff
 800147a:	e007      	b.n	800148c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <is_button_pressed_1s+0x30>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	2b01      	cmp	r3, #1
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000090 	.word	0x20000090

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x60>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_MspInit+0x60>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d113      	bne.n	800153a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fa5d 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fa76 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f93b 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM2_IRQHandler+0x10>)
 800159e:	f001 f88b 	bl	80026b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000bc 	.word	0x200000bc

080015ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <setTimer0>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer0(int duration){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <setTimer0+0x2c>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1092      	asrs	r2, r2, #2
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <setTimer0+0x30>)
 80015d0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <setTimer0+0x34>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	66666667 	.word	0x66666667
 80015e8:	2000009c 	.word	0x2000009c
 80015ec:	200000a0 	.word	0x200000a0

080015f0 <setTimer1>:

void setTimer1(int duration){
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <setTimer1+0x2c>)
 80015fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001600:	1092      	asrs	r2, r2, #2
 8001602:	17db      	asrs	r3, r3, #31
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <setTimer1+0x30>)
 8001608:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <setTimer1+0x34>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	66666667 	.word	0x66666667
 8001620:	200000a4 	.word	0x200000a4
 8001624:	200000a8 	.word	0x200000a8

08001628 <setTimer2>:

void setTimer2(int duration){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <setTimer2+0x2c>)
 8001634:	fb82 1203 	smull	r1, r2, r2, r3
 8001638:	1092      	asrs	r2, r2, #2
 800163a:	17db      	asrs	r3, r3, #31
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <setTimer2+0x30>)
 8001640:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <setTimer2+0x34>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	66666667 	.word	0x66666667
 8001658:	200000ac 	.word	0x200000ac
 800165c:	200000b0 	.word	0x200000b0

08001660 <timer_run>:
void setTimer3(int duration){
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void timer_run(){
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	if(timer0_counter>0){
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <timer_run+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	dd0b      	ble.n	8001684 <timer_run+0x24>
		timer0_counter--;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <timer_run+0x8c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <timer_run+0x8c>)
 8001674:	6013      	str	r3, [r2, #0]
		if(timer0_counter<=0) timer0_flag = 1;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <timer_run+0x8c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dc02      	bgt.n	8001684 <timer_run+0x24>
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <timer_run+0x90>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter>0){
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <timer_run+0x94>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd0b      	ble.n	80016a4 <timer_run+0x44>
		timer1_counter--;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <timer_run+0x94>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <timer_run+0x94>)
 8001694:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0) timer1_flag = 1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <timer_run+0x94>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dc02      	bgt.n	80016a4 <timer_run+0x44>
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <timer_run+0x98>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0){
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <timer_run+0x9c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd0b      	ble.n	80016c4 <timer_run+0x64>
		timer2_counter--;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <timer_run+0x9c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <timer_run+0x9c>)
 80016b4:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0) timer2_flag = 1;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <timer_run+0x9c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dc02      	bgt.n	80016c4 <timer_run+0x64>
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <timer_run+0xa0>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0){
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <timer_run+0xa4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	dd0b      	ble.n	80016e4 <timer_run+0x84>
		timer3_counter--;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <timer_run+0xa4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <timer_run+0xa4>)
 80016d4:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0) timer3_flag = 1;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <timer_run+0xa4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dc02      	bgt.n	80016e4 <timer_run+0x84>
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <timer_run+0xa8>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
	}
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	2000009c 	.word	0x2000009c
 80016f0:	200000a0 	.word	0x200000a0
 80016f4:	200000a4 	.word	0x200000a4
 80016f8:	200000a8 	.word	0x200000a8
 80016fc:	200000ac 	.word	0x200000ac
 8001700:	200000b0 	.word	0x200000b0
 8001704:	200000b4 	.word	0x200000b4
 8001708:	200000b8 	.word	0x200000b8

0800170c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d103      	bne.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800171e:	f7ff fd67 	bl	80011f0 <button_reading>
		timer_run();
 8001722:	f7ff ff9d 	bl	8001660 <timer_run>
	}
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	; (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001756:	f7ff ff29 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f001 faf5 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175e:	f7ff faaf 	bl	8000cc0 <main>
  bx lr
 8001762:	4770      	bx	lr
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800176c:	08002de0 	.word	0x08002de0
  ldr r2, =_sbss
 8001770:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001774:	20000108 	.word	0x20000108

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x28>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f923 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f808 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fe80 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x54>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f93b 	bl	8001a42 <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f000 f903 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x5c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000038 	.word	0x20000038
 8001800:	20000040 	.word	0x20000040
 8001804:	2000003c 	.word	0x2000003c

08001808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x1c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x20>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_IncTick+0x20>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000040 	.word	0x20000040
 8001828:	20000104 	.word	0x20000104

0800182c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_GetTick+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000104 	.word	0x20000104

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <__NVIC_EnableIRQ+0x34>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff90 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff2d 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff42 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff35 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e148      	b.n	8001d02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a70:	2201      	movs	r2, #1
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8137 	bne.w	8001cfc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4aa3      	ldr	r2, [pc, #652]	; (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d05e      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001a98:	4aa1      	ldr	r2, [pc, #644]	; (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d875      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001a9e:	4aa1      	ldr	r2, [pc, #644]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d058      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a9f      	ldr	r2, [pc, #636]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d86f      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001aaa:	4a9f      	ldr	r2, [pc, #636]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d052      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d869      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ab6:	4a9d      	ldr	r2, [pc, #628]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d04c      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001abc:	4a9b      	ldr	r2, [pc, #620]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d863      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ac2:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d046      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d85d      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d82a      	bhi.n	8001b28 <HAL_GPIO_Init+0xcc>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d859      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <HAL_GPIO_Init+0x80>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001b57 	.word	0x08001b57
 8001ae0:	08001b31 	.word	0x08001b31
 8001ae4:	08001b43 	.word	0x08001b43
 8001ae8:	08001b85 	.word	0x08001b85
 8001aec:	08001b8b 	.word	0x08001b8b
 8001af0:	08001b8b 	.word	0x08001b8b
 8001af4:	08001b8b 	.word	0x08001b8b
 8001af8:	08001b8b 	.word	0x08001b8b
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b8b 	.word	0x08001b8b
 8001b04:	08001b8b 	.word	0x08001b8b
 8001b08:	08001b8b 	.word	0x08001b8b
 8001b0c:	08001b8b 	.word	0x08001b8b
 8001b10:	08001b8b 	.word	0x08001b8b
 8001b14:	08001b8b 	.word	0x08001b8b
 8001b18:	08001b8b 	.word	0x08001b8b
 8001b1c:	08001b8b 	.word	0x08001b8b
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b4d 	.word	0x08001b4d
 8001b28:	4a82      	ldr	r2, [pc, #520]	; (8001d34 <HAL_GPIO_Init+0x2d8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2e:	e02c      	b.n	8001b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e029      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e024      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	3308      	adds	r3, #8
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e01f      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	330c      	adds	r3, #12
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	e01a      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e013      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	611a      	str	r2, [r3, #16]
          break;
 8001b76:	e009      	b.n	8001b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	615a      	str	r2, [r3, #20]
          break;
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          break;
 8001b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d801      	bhi.n	8001b96 <HAL_GPIO_Init+0x13a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_Init+0x13e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	; 0xff
 8001ba0:	d802      	bhi.n	8001ba8 <HAL_GPIO_Init+0x14c>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x152>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3b08      	subs	r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	6a39      	ldr	r1, [r7, #32]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8090 	beq.w	8001cfc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00d      	beq.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_Init+0x1dc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_GPIO_Init+0x1d8>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	493b      	ldr	r1, [pc, #236]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4937      	ldr	r1, [pc, #220]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4933      	ldr	r1, [pc, #204]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	492d      	ldr	r1, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4929      	ldr	r1, [pc, #164]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	4923      	ldr	r1, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	491f      	ldr	r1, [pc, #124]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4919      	ldr	r1, [pc, #100]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4915      	ldr	r1, [pc, #84]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	3301      	adds	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f aeaf 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	372c      	adds	r7, #44	; 0x2c
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	10320000 	.word	0x10320000
 8001d24:	10310000 	.word	0x10310000
 8001d28:	10220000 	.word	0x10220000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	10120000 	.word	0x10120000
 8001d34:	10110000 	.word	0x10110000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e26c      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4b8f      	ldr	r3, [pc, #572]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06c      	beq.n	8001edc <HAL_RCC_OscConfig+0x12c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d168      	bne.n	8001edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e246      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76>
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7f      	ldr	r2, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e02e      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b78      	ldr	r3, [pc, #480]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a77      	ldr	r2, [pc, #476]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xbc>
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a71      	ldr	r2, [pc, #452]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	4b6b      	ldr	r3, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fcce 	bl	800182c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fcca 	bl	800182c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1fa      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xe4>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fcba 	bl	800182c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fcb6 	bl	800182c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1e6      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x10c>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1ba      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4939      	ldr	r1, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	e03a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fc6f 	bl	800182c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f52:	f7ff fc6b 	bl	800182c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e19b      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc4e 	bl	800182c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff fc4a 	bl	800182c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e17a      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03a      	beq.n	8002034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fc2e 	bl	800182c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fc2a 	bl	800182c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e15a      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 faa6 	bl	8002544 <RCC_Delay>
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff fc14 	bl	800182c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fc10 	bl	800182c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d908      	bls.n	8002028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e140      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	42420000 	.word	0x42420000
 8002024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	4b9e      	ldr	r3, [pc, #632]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e9      	bne.n	8002008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a6 	beq.w	800218e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b97      	ldr	r3, [pc, #604]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a93      	ldr	r2, [pc, #588]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b8b      	ldr	r3, [pc, #556]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a8a      	ldr	r2, [pc, #552]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff fbd1 	bl	800182c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff fbcd 	bl	800182c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0fd      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x312>
 80020b4:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e02d      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x334>
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	e01c      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x356>
 80020ec:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a6c      	ldr	r2, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b64      	ldr	r3, [pc, #400]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a63      	ldr	r2, [pc, #396]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fb81 	bl	800182c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff fb7d 	bl	800182c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0ab      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCC_OscConfig+0x37e>
 8002150:	e014      	b.n	800217c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb6b 	bl	800182c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff fb67 	bl	800182c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e095      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8081 	beq.w	800229a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d061      	beq.n	8002268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d146      	bne.n	800223a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb3b 	bl	800182c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff fb37 	bl	800182c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e067      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	492d      	ldr	r1, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a19      	ldr	r1, [r3, #32]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	430b      	orrs	r3, r1
 8002206:	4927      	ldr	r1, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fb0b 	bl	800182c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fb07 	bl	800182c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e037      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x46a>
 8002238:	e02f      	b.n	800229a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff faf4 	bl	800182c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff faf0 	bl	800182c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e020      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x498>
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e013      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40007000 	.word	0x40007000
 80022ac:	42420060 	.word	0x42420060

080022b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d0      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4965      	ldr	r1, [pc, #404]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800232e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d040      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d115      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e073      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06b      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff fa44 	bl	800182c <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7ff fa40 	bl	800182c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e053      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d210      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4922      	ldr	r1, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f821 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1cc>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f9a2 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	40021000 	.word	0x40021000
 8002478:	08002dc8 	.word	0x08002dc8
 800247c:	20000038 	.word	0x20000038
 8002480:	2000003c 	.word	0x2000003c

08002484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b490      	push	{r4, r7}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb0>)
 800248c:	1d3c      	adds	r4, r7, #4
 800248e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002494:	f240 2301 	movw	r3, #513	; 0x201
 8002498:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x40>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x46>
 80024c2:	e02d      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c6:	623b      	str	r3, [r7, #32]
      break;
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024d6:	4413      	add	r3, r2
 80024d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0c5b      	lsrs	r3, r3, #17
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f6:	4413      	add	r3, r2
 80024f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002502:	fb02 f203 	mul.w	r2, r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	623b      	str	r3, [r7, #32]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	6a3b      	ldr	r3, [r7, #32]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc90      	pop	{r4, r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	08002db8 	.word	0x08002db8
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	003d0900 	.word	0x003d0900

08002544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <RCC_Delay+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <RCC_Delay+0x38>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002560:	bf00      	nop
  }
  while (Delay --);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <RCC_Delay+0x1c>
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000038 	.word	0x20000038
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e041      	b.n	8002616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe ffaa 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 fa6a 	bl	8002a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d001      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e035      	b.n	80026a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_TIM_Base_Start_IT+0x4e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002662:	d004      	beq.n	800266e <HAL_TIM_Base_Start_IT+0x4e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_TIM_Base_Start_IT+0x94>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b06      	cmp	r3, #6
 800267e:	d010      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	e007      	b.n	80026a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0202 	mvn.w	r2, #2
 80026e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9b1 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9a4 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9b3 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d122      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11b      	bne.n	8002768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0204 	mvn.w	r2, #4
 8002738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f987 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002754:	e005      	b.n	8002762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f97a 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f989 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0208 	mvn.w	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f95d 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f950 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f95f 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0210 	mvn.w	r2, #16
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f933 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f926 	bl	8002a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f935 	bl	8002a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0201 	mvn.w	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe ff68 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa67 	bl	8002d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8f9 	bl	8002a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0220 	mvn.w	r2, #32
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa32 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x18>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0b3      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x180>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002906:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002918:	d03e      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xd0>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	f200 8087 	bhi.w	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	f000 8085 	beq.w	8002a34 <HAL_TIM_ConfigClockSource+0x16c>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d87f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d01a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xa2>
 8002934:	2b70      	cmp	r3, #112	; 0x70
 8002936:	d87b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d050      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x116>
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d877      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d03c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xf6>
 8002944:	2b50      	cmp	r3, #80	; 0x50
 8002946:	d873      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d058      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x136>
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d86f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d064      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d86b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d060      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d867      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d05a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002968:	e062      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 f95c 	bl	8002c36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800298c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
      break;
 8002996:	e04e      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f000 f945 	bl	8002c36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e03b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8bc 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2150      	movs	r1, #80	; 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f913 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e02b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8da 	bl	8002ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2160      	movs	r1, #96	; 0x60
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f903 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e01b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f89c 	bl	8002b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8f3 	bl	8002c02 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 f8ea 	bl	8002c02 <TIM_ITRx_SetConfig>
        break;
 8002a2e:	e002      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x28>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <TIM_Base_SetConfig+0xac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <TIM_Base_SetConfig+0x52>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d003      	beq.n	8002aea <TIM_Base_SetConfig+0x52>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <TIM_Base_SetConfig+0xac>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d108      	bne.n	8002afc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <TIM_Base_SetConfig+0xa8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d103      	bne.n	8002b30 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	615a      	str	r2, [r3, #20]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400

08002b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 030a 	bic.w	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f023 0210 	bic.w	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	031b      	lsls	r3, r3, #12
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f043 0307 	orr.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	609a      	str	r2, [r3, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e041      	b.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10c      	bne.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	4d0c      	ldr	r5, [pc, #48]	; (8002d80 <__libc_init_array+0x38>)
 8002d4e:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d50:	1b64      	subs	r4, r4, r5
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	f000 f822 	bl	8002da0 <_init>
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	4d0a      	ldr	r5, [pc, #40]	; (8002d88 <__libc_init_array+0x40>)
 8002d60:	4c0a      	ldr	r4, [pc, #40]	; (8002d8c <__libc_init_array+0x44>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002dd8 	.word	0x08002dd8
 8002d84:	08002dd8 	.word	0x08002dd8
 8002d88:	08002dd8 	.word	0x08002dd8
 8002d8c:	08002ddc 	.word	0x08002ddc

08002d90 <memset>:
 8002d90:	4603      	mov	r3, r0
 8002d92:	4402      	add	r2, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <_init>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr

08002dac <_fini>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr
